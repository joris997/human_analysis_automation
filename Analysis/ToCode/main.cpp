#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <OpenSim/OpenSim.h>

const std::string ABSPATH = "/home/none/Downloads/TUd_2020-2021/Research/master_thesis/2_experiments/motion_capture/Guoping/sub06";

int main(int argc, char** argv)
{
//    char* runChar = argv[1];
    char* runChar = "01-01";
    std::string run = runChar;

    std::string modelFile = ABSPATH + "/Analysis/RRA/results/RRA-"+run+"/sub06_model_RRA-"+run+".osim";

    OpenSim::Model model(modelFile);
    SimTK::State& st = model.initSystem();

    std::vector<double> masses;
    std::vector<std::string> bodies;
    std::vector<SimTK::Vec3> inertias;
    std::vector<SimTK::Vec3> poscom;
    for (auto& body : model.updComponentList<OpenSim::Body>()){
        masses.push_back(body.getMass());
        bodies.push_back(body.getName());
        inertias.push_back(body.getInertia().getMoments());
        poscom.push_back(body.getPositionInGround(st));
    }

    std::string outFile = ABSPATH + "/Analysis/ToCode/results/body_"+run+".m";
    std::ofstream out(outFile);

    out << "function params = body_"+run+"()\n";
    out << "%% Get the body parameters for a specific RRA'd model\n";
    out << "% This file has been generated by Joris Verhagen in C++\n";
    for (unsigned i=0; i<bodies.size(); i++){
        out << bodies[i]+"Mass = "+std::to_string(masses[i])+";\n";
        out << bodies[i]+"Inertia = ["+std::to_string(inertias[i][0])+","+std::to_string(inertias[i][0])+","+std::to_string(inertias[i][0])+"];\n";
        out << bodies[i]+"Position = ["+std::to_string(poscom[i][0])+","+std::to_string(poscom[i][0])+","+std::to_string(poscom[i][0])+"];\n";
        out << "\n\n";
    }

    std::vector<std::string> bodiesFemur{"calcn_r","femur_r","toes_r"};
    std::vector<std::string> bodiesTibia{"tibia_r"};
    std::vector<std::string> bodiesPelvis{"pelvis","torso",
                                          "hand_r","hand_l",
                                          "ulna_r","ulna_l",
                                          "humerus_r","humerus_l",
                                          "radius_r","radius_l"};
    std::vector<int> bFemur, bTibia, bPelvis;
    for (unsigned b=0; b<bodies.size(); b++){
        for (unsigned i=0; i<bodiesFemur.size(); i++){
            if (std::strcmp(bodies[b].c_str(),bodiesFemur[i].c_str()) == 0){
                bFemur.push_back(b);
            }
        }
        for (unsigned i=0; i<bodiesTibia.size(); i++){
            if (std::strcmp(bodies[b].c_str(),bodiesTibia[i].c_str()) == 0){
                bTibia.push_back(b);
            }
        }
        for (unsigned i=0; i<bodiesPelvis.size(); i++){
            if (std::strcmp(bodies[b].c_str(),bodiesPelvis[i].c_str()) == 0){
                bPelvis.push_back(b);
            }
        }
    }

    // FEMUR
    double totalMass = 0.0;
    double numerator[3], pcom[3];
    for (unsigned i=0; i<bFemur.size(); i++){
        int b = bFemur[i];
        totalMass += masses[b];
        numerator[0] += poscom[b][0]*masses[b];
        numerator[1] += poscom[b][1]*masses[b];
        numerator[2] += poscom[b][2]*masses[b];
    }
    pcom[0] = numerator[0]/totalMass;
    pcom[1] = numerator[1]/totalMass;
    pcom[2] = numerator[2]/totalMass;
    SimTK::Vec3 pcomVec3 = {pcom[0],pcom[1],pcom[2]};

    SimTK::Vec3 totalInertia = {0,0,0};
    for (unsigned i=0; i<bFemur.size(); i++){
        int b = bFemur[i];
        totalInertia += inertias[b] + masses[b]*(poscom[b] - pcomVec3).norm();
    }

    out << "FemurMassTotal    = " << totalMass << ";\n";
    out << "FemurCoMTotal     = ["<<pcom[0]<<","<<pcom[1]<<","<<pcom[2]<<"];\n";
    out << "FemurInertiaTotal = ["<<totalInertia[0]<<","<<totalInertia[1]<<","<<totalInertia[2]<<"];\n";

    return 0;
}

